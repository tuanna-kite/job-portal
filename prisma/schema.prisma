// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum UserStatus {
  pending
  active
  archived
}

enum DisabilityType {
  VISION_IMPAIRMENT // Khiếm thị / Mù / Thị lực yếu
  HEARING_IMPAIRMENT // Khiếm thính / Điếc
  SPEECH_IMPAIRMENT // Khó nói / Không nói được
  PHYSICAL_DISABILITY // Vận động (liệt, mất chi, yếu cơ, bại não,...)
  INTELLECTUAL_DISABILITY // Khuyết tật trí tuệ
  MENTAL_DISABILITY // Rối loạn tâm thần, trầm cảm nặng, rối loạn lo âu, v.v.
  AUTISM_SPECTRUM // Rối loạn phổ tự kỷ
  LEARNING_DISABILITY // Khó khăn trong học tập (dyslexia, ADHD, v.v.)
  MULTIPLE_DISABILITIES // Đa khuyết tật (kết hợp nhiều dạng)
  OTHER // Khác (ghi rõ mô tả)
}

enum RepRole {
  rep
  rep_lead
}

enum Gender {
  male
  female
}

enum RepStatus {
  active
  suspended
}

enum RegionLevel {
  province
  district
  ward
  municipality
}

enum AdminRole {
  super_admin
  coordinator
}

enum OpportunityLocationType {
  remote
  hybrid
  onsite
}

enum OpportunityStatus {
  open
  closed
}

enum CaseStatus {
  pending
  in_progress
  matched
  rejected
  done
}

enum NeedReportCreatedBy {
  user
  rep
}

enum NeedSupportCategory {
  JOB_SEEKING // Tìm việc làm
  TRAINING_EDUCATION // Hỗ trợ đào tạo / giáo dục nghề
  ASSISTIVE_DEVICES // Hỗ trợ thiết bị (xe lăn, máy trợ thính,...)
  FINANCIAL_ASSISTANCE // Hỗ trợ tài chính / trợ cấp
  HEALTHCARE_SUPPORT // Hỗ trợ y tế / phục hồi chức năng
  HOUSING_SUPPORT // Hỗ trợ chỗ ở / cải thiện nơi ở
  TRANSPORTATION_SUPPORT // Hỗ trợ di chuyển (phương tiện, vé xe,...)
  LEGAL_SUPPORT // Hỗ trợ pháp lý, giấy tờ
  SOCIAL_INCLUSION // Hỗ trợ hòa nhập xã hội, cộng đồng
  COUNSELING_MENTAL_HEALTH // Tư vấn tâm lý, sức khỏe tinh thần
  TECHNICAL_SUPPORT // Hỗ trợ kỹ thuật, công nghệ, truy cập số
  VOLUNTEER_ASSISTANCE // Hỗ trợ từ tình nguyện viên
  OTHER // Nhu cầu khác
}

enum NeedReportStatus {
  open
  reviewing
  resolved
}

// ---------- Models ----------
model User {
  id             String          @id @default(uuid()) @db.Uuid
  cccd           String          @unique @db.VarChar()
  fullName       String          @db.VarChar(255)
  gender         Gender
  birthDate      DateTime        @db.Date
  phone          String          @unique @db.VarChar(20)
  disabilityType DisabilityType
  skills         String[] // text[]
  desiredJob     String?         @db.VarChar(255)
  address        String?
  status         UserStatus      @default(pending)
  // Region 1-n
  regionId       String?         @db.Uuid
  region         Region?         @relation(fields: [regionId], references: [id])
  // Rep 1-n
  repId          String?         @db.Uuid
  representative Representative? @relation(fields: [repId], references: [id])
  // Cases n-1
  cases          Case[]
  needReports    NeedReport[]
  // Timestamp
  createdAt      DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime        @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([regionId])
  @@index([repId])
  @@map("users")
}

model Representative {
  id                  String       @id @default(uuid()) @db.Uuid
  fullName            String       @db.VarChar(255)
  email               String       @unique @db.VarChar(255)
  phone               String       @db.VarChar(20)
  organization        String       @db.VarChar(255)
  role                RepRole      @default(rep)
  status              RepStatus    @default(active)
  // Region 1-n
  regionScopeId       String       @db.Uuid
  regionScope         Region       @relation(fields: [regionScopeId], references: [id])
  // Admin Coordinate
  accountId           String?      @unique @db.Uuid
  account             Admin?       @relation(fields: [accountId], references: [id])
  // User phu trach: n-1
  users               User[]
  // Cases phu trach: n-1
  assignedCases       Case[]
  // Reports phu trach: n-1
  needReportsAssigned NeedReport[]
  // Timestamp
  createdAt           DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime     @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([regionScopeId])
  @@index([accountId])
  @@map("representatives")
}

model Region {
  id       String           @id @default(uuid()) @db.Uuid
  name     String           @db.VarChar(255)
  level    RegionLevel
  parentId String?          @db.Uuid
  parent   Region?          @relation("RegionHierarchy", fields: [parentId], references: [id])
  children Region[]         @relation("RegionHierarchy")
  users    User[]
  reps     Representative[]

  @@index([parentId])
  @@map("regions")
}

model Admin {
  id         String          @id @default(uuid()) @db.Uuid
  fullName   String          @db.VarChar(255)
  email      String          @unique @db.VarChar(255)
  password   String          @db.VarChar(255)
  role       AdminRole       @default(coordinator)
  createdAt  DateTime        @default(now()) @db.Timestamptz(6)
  repProfile Representative?

  @@map("admins")
}

model Opportunity {
  id           String                  @id @default(uuid()) @db.Uuid
  title        String                  @db.VarChar(255)
  description  String?
  requirements String?
  locationType OpportunityLocationType @default(remote)
  salaryRange  String?                 @db.VarChar(100)
  source       String?                 @db.VarChar(255)
  status       OpportunityStatus       @default(open)
  // Cases: n-1
  cases        Case[]
  // Timestamp
  createdAt    DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime                @default(now()) @updatedAt @db.Timestamptz(6)

  @@map("opportunities")
}

model Case {
  id            String          @id @default(uuid()) @db.Uuid
  userId        String          @db.Uuid
  user          User            @relation(fields: [userId], references: [id])
  status        CaseStatus      @default(pending)
  notes         String?
  // Opportunity: 1-n
  opportunityId String          @db.Uuid
  opportunity   Opportunity     @relation(fields: [opportunityId], references: [id])
  // Rep: 1-n
  assignedRepId String?         @db.Uuid
  assignedRep   Representative? @relation(fields: [assignedRepId], references: [id])
  // Timestamp
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime        @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([userId])
  @@index([opportunityId])
  @@index([assignedRepId])
  @@map("cases")
}

model NeedReport {
  id           String              @id @default(uuid()) @db.Uuid
  userId       String              @db.Uuid
  user         User                @relation(fields: [userId], references: [id])
  status       NeedReportStatus    @default(open)
  // Nguoi tao
  createdBy    NeedReportCreatedBy @default(user)
  category     NeedSupportCategory
  description  String
  attachments  String[] // text[] (URLs/paths)
  // Nguoi xu ly
  assignedToId String?             @db.Uuid
  assignedTo   Representative?     @relation(fields: [assignedToId], references: [id])
  // Timestamp
  createdAt    DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime            @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([userId])
  @@index([assignedToId])
  @@map("need_reports")
}
